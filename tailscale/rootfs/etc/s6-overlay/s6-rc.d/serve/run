#!/usr/bin/with-contenv bashio
# serve/run - generate nginx config from /data/options.json and start nginx
set -euo pipefail

# IMPORTANT: This script expects 'jq' to be available. If your add-on image
# does not include jq, add it to the Dockerfile (e.g. apk add --no-cache jq).
#
# Behavior:
#  - reads /data/options.json
#  - looks for .services array
#  - supports items that are objects: { "path": "/nodered", "port": 8443 }
#  - supports items that are strings: "8443:/nodered"
#  - writes /etc/nginx/conf.d/services.conf then starts nginx

CONFIG_JSON='/data/options.json'
NGINX_CONF='/etc/nginx/conf.d/services.conf'

bashio::log info "serve/run: starting. Generating nginx config from ${CONFIG_JSON}..."

# check jq exists
if ! command -v jq >/dev/null 2>&1; then
  bashio::log fatal "jq not found. Please include 'jq' in the add-on image (apk add --no-cache jq)."
  exit 1
fi

# ensure config exists
if [ ! -f "${CONFIG_JSON}" ]; then
  bashio::log warning "${CONFIG_JSON} not found — creating empty default."
  echo '{"services":[{"path":"/","port":8123}]}' > "${CONFIG_JSON}"
fi

# create nginx conf header
cat > "${NGINX_CONF}" <<'EOF'
# Auto-generated by serve/run
server {
    listen 443;
    server_name _;

    # common proxy settings
    proxy_buffering off;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    client_max_body_size 0;
EOF

# iterate over services array
# we use jq to produce canonical JSON lines for each item
jq -c '.services[]' "${CONFIG_JSON}" 2>/dev/null | while read -r item; do
    # detect if item is an object or string
    item_type=$(echo "${item}" | jq -r 'type')

    if [ "${item_type}" = "object" ]; then
        PATH_VAL=$(echo "${item}" | jq -r '.path // empty')
        PORT_VAL=$(echo "${item}" | jq -r '.port // empty')
    elif [ "${item_type}" = "string" ]; then
        # expected format "port:/path" (colon separates)
        pair=$(echo "${item}" | sed -e 's/^"//' -e 's/"$//')
        PORT_VAL=$(echo "${pair}" | cut -d: -f1)
        PATH_VAL=$(echo "${pair}" | cut -d: -f2-)
    else
        bashio::log warning "Skipping unsupported service entry: ${item}"
        continue
    fi

    # basic validation
    if [ -z "${PORT_VAL}" ] || [ -z "${PATH_VAL}" ]; then
        bashio::log warning "Service entry missing port/path — skipping: ${item}"
        continue
    fi

    # normalize path: ensure leading slash
    case "${PATH_VAL}" in
        /*) ;; # ok
        *) PATH_VAL="/${PATH_VAL}" ;;
    esac

    # add trailing slash for location match and proxy_pass target
    if [ "${PATH_VAL}" = "/" ]; then
        # root mapping
        cat >> "${NGINX_CONF}" <<EOF

    # Home/root proxy -> 127.0.0.1:${PORT_VAL}
    location / {
        proxy_pass http://127.0.0.1:${PORT_VAL}/;
    }
EOF
    else
        # ensure path ends with slash for matching subpath and preserving trailing segments
        PATH_SLASH="${PATH_VAL%/}/"

        # Use '^~' to prefer prefix-only match (improves performance and avoids regex fallthrough)
        cat >> "${NGINX_CONF}" <<EOF

    # Proxy for ${PATH_SLASH} -> 127.0.0.1:${PORT_VAL}
    location ^~ ${PATH_SLASH} {
        # strip the prefix so the upstream receives the remainder of the path exactly
        # using proxy_pass with a trailing slash preserves the part after the matched prefix.
        proxy_pass http://127.0.0.1:${PORT_VAL}/;
    }
EOF
    fi

    bashio::log info "Added proxy: ${PATH_VAL} -> 127.0.0.1:${PORT_VAL}"
done

# close server block
cat >> "${NGINX_CONF}" <<'EOF'

}
EOF

# test nginx config
if nginx -t -c /etc/nginx/nginx.conf; then
    bashio::log info "nginx config OK, starting nginx..."
else
    bashio::log fatal "nginx configuration test failed. See logs for details."
    exit 1
fi

# start nginx in foreground (s6 expects the run script to exec/foreground the proc)
exec nginx -g 'daemon off;'
